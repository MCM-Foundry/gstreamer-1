From 4e50d2b6bd95394f9cb1db2389f759be2a6d2d83 Mon Sep 17 00:00:00 2001
From: George Kiagiadakis <george.kiagiadakis@collabora.com>
Date: Fri, 20 Apr 2012 17:12:37 +0300
Subject: [PATCH 1/4] Add hack to load and initialize libbcm_host.so on
 broadcom SoCs

---
 omx/gstomx.c |   36 ++++++++++++++++++++++++++++++++++--
 omx/gstomx.h |    7 ++++++-
 2 files changed, 40 insertions(+), 3 deletions(-)

diff --git a/omx/gstomx.c b/omx/gstomx.c
index 4502825..97fac61 100644
--- a/omx/gstomx.c
+++ b/omx/gstomx.c
@@ -42,7 +42,7 @@ G_LOCK_DEFINE_STATIC (core_handles);
 static GHashTable *core_handles;
 
 GstOMXCore *
-gst_omx_core_acquire (const gchar * filename)
+gst_omx_core_acquire (const gchar * filename, guint64 hacks)
 {
   GstOMXCore *core;
 
@@ -58,6 +58,36 @@ gst_omx_core_acquire (const gchar * filename)
     core->user_count = 0;
     g_hash_table_insert (core_handles, g_strdup (filename), core);
 
+    if (hacks & GST_OMX_HACK_BROADCOM_HOST) {
+      gchar *bcm_host_filename;
+      gchar *bcm_host_path;
+      gchar *path_end;
+      GModule *bcm_host_module;
+      void (*bcm_host_init) (void);
+
+      path_end = g_strrstr (filename, "/");
+      bcm_host_path = g_strndup (filename, path_end - filename + 1);
+      bcm_host_filename = g_strconcat (bcm_host_path, "libbcm_host.so", NULL);
+
+      bcm_host_module = g_module_open (bcm_host_filename, G_MODULE_BIND_LAZY);
+
+      g_free (bcm_host_filename);
+      g_free (bcm_host_path);
+
+      if (!bcm_host_module) {
+        GST_ERROR ("Failed to load libbcm_host.so");
+        goto error;
+      }
+
+      if (!g_module_symbol (bcm_host_module, "bcm_host_init",
+              (gpointer *) & bcm_host_init)) {
+        GST_ERROR ("Failed to load symbol 'bcm_host_init' from libbcm_host.so");
+        goto error;
+      }
+
+      bcm_host_init ();
+    }
+
     core->module = g_module_open (filename, G_MODULE_BIND_LAZY);
     if (!core->module)
       goto load_failed;
@@ -400,7 +430,7 @@ gst_omx_component_new (GstObject * parent, const gchar * core_name,
   GstOMXCore *core;
   GstOMXComponent *comp;
 
-  core = gst_omx_core_acquire (core_name);
+  core = gst_omx_core_acquire (core_name, hacks);
   if (!core)
     return NULL;
 
@@ -1985,6 +2015,8 @@ gst_omx_parse_hacks (gchar ** hacks)
       hacks_flags |= GST_OMX_HACK_DRAIN_MAY_NOT_RETURN;
     else if (g_str_equal (*hacks, "no-component-role"))
       hacks_flags |= GST_OMX_HACK_NO_COMPONENT_ROLE;
+    else if (g_str_equal (*hacks, "bcm-host"))
+      hacks_flags |= GST_OMX_HACK_BROADCOM_HOST;
     else
       GST_WARNING ("Unknown hack: %s", *hacks);
     hacks++;
diff --git a/omx/gstomx.h b/omx/gstomx.h
index e313f47..5b222e2 100644
--- a/omx/gstomx.h
+++ b/omx/gstomx.h
@@ -77,6 +77,11 @@ G_BEGIN_DECLS
  */
 #define GST_OMX_HACK_NO_COMPONENT_ROLE                                G_GUINT64_CONSTANT (0x0000000000000080)
 
+/* On broadcom chips, the openmax library doesn't work
+ * unless we load and initialize the bcm_host library
+ */
+#define GST_OMX_HACK_BROADCOM_HOST                                    G_GUINT64_CONSTANT (0x0000000000000100)
+
 
 typedef struct _GstOMXCore GstOMXCore;
 typedef struct _GstOMXPort GstOMXPort;
@@ -203,7 +208,7 @@ GKeyFile *        gst_omx_get_configuration (void);
 const gchar *     gst_omx_error_to_string (OMX_ERRORTYPE err);
 guint64           gst_omx_parse_hacks (gchar ** hacks);
 
-GstOMXCore *      gst_omx_core_acquire (const gchar * filename);
+GstOMXCore *      gst_omx_core_acquire (const gchar * filename, guint64 hacks);
 void              gst_omx_core_release (GstOMXCore * core);
 
 
-- 
1.7.8.5

